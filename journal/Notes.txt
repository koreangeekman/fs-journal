// SECTION - VSC notes

// alt + arrows to move line
// highlight / select then Ctrl + D to select additional occurrences

// sweetalert2.github.io - js pop-ups


// SECTION - JS notes

// Instructions: Write a function that finds the longest word in a string.When a Tie is found return the first longest word found.

// Provided solution
function longestWord(str) {
  let words = str.split(' ')
  words.sort((a, b) => b.length - a.length)
  return words[0]
}

// Improv solution
function challenge(str) {
  let string = str.split(' ');
  let wordLength = 0;
  let longestWord = "";
  string.forEach(word => {
    if (word.length > wordLength) {
      wordLength = word.length;
      longestWord = word;
      // console.log(wordLength, longestWord)
    }
    // console.log(wordLength, longestWord);
  })
  return longestWord;
}

// ternary operator
// object.color = blue;
console.log(`This item's color is ${object.color ? 'blue' : 'unknown'}`)

const object = {}

// creates a reference PointerEvent, not a copy equal to
const referencePointer = object

// spread operator - breaks reference - dumps all data into specified region
// [...array] or {...object}


// find stops at the first instance

// filter allows all instances to be found
const items = [];
items.filter(item => item.key == value)


// prompting for user input - save response to a variable
const promptedMsg = window.prompt("prompt message")


// Filter returns an Array, Find returns a single item/object


// element attribute can redefine how the browser seeing the element
//   ie. { role = "button" }

// CSS to remove highlight response
// user-select: none

// CSS to reduce size on element
// width: fit-element

// clamp the values to appropriate values

// setTnterval(fn, ms)

// manipulating HTML attributes
//   .querySelector('element')
//   .querySelector('element>element') // to grab the second element nested
//   .setAttribute('attribute','value')

// emojipedia.org
// munchimunchi.herokuapp.com - game



MVC - Model View Controller

View:
  index.html

  (view talks to the controller) -->
  (controller talks to the view) <--

Controller: (should ONLY take user inputs & update the DOM)
  app.js

  (controller talks to the service) -->

[Service] (middle-man role) (create classes outside of the export, then export a singular instance via const declaration)
  calcs, throw errors, etc

  (service talks to the model) -->

Model: (primary data/global variable storage/class declaration)
  appstate.js // central source of information?


methods are a function stored in an object

when linking files with import, only what has been 'exported' from the designated file gets relayed

private properties inside an object? indicated with #
private function/methods in modules started with _

CRUD
Create - Post
Read - Get
Update - Put
Destroy - Delete

temp-mail.org

Allowed Callbacks
http://localhost:8080,http://localhost:8081,http://localhost:3000,http://localhost:3001,https://localhost:7045

audience
https://geekman.lab0


https://developer.themoviedb.org/reference/intro/getting-started

**make checklist app for checkpoints/project**